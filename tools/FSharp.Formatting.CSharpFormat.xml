<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FSharp.Formatting.CSharpFormat</name>
    </assembly>
    <members>
        <member name="T:FSharp.Formatting.CSharpFormat.CLikeFormat">
             <summary>
             Provides a base class for formatting languages similar to C.
             </summary>
            
             <namespacedoc>
               <summary>Functionality for formatting code in various languages</summary>
             </namespacedoc>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CLikeFormat.CommentRegEx">
            <summary>
            Regular expression string to match single line and multi-line 
            comments (// and /* */). 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CLikeFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.CodeFormat">
            <summary>
            Provides a base class for formatting most programming languages.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.Keywords">
            <summary>
            Must be overridden to provide a list of keywords defined in 
            each language.
            </summary>
            <remarks>
            Keywords must be separated with spaces.
            </remarks>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.Operators">
            <summary>
            Must be overridden to provide a list of operators defined in 
            each language.
            </summary>
            <remarks>
            Operators must be separated with spaces.
            </remarks>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.Preprocessors">
            <summary>
            Can be overridden to provide a list of preprocessors defined in 
            each language.
            </summary>
            <remarks>
            Preprocessors must be separated with spaces.
            </remarks>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.StringRegEx">
            <summary>
            Must be overridden to provide a regular expression string
            to match strings literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.CommentRegEx">
            <summary>
            Must be overridden to provide a regular expression string
            to match comments. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.NumberRegEx">
            <summary>
            Can be overridden to provide a list of tokes to be recognized as numbers.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CodeFormat.CaseSensitive">
            <summary>
            Determines if the language is case sensitive.
            </summary>
            <value><b>true</b> if the language is case sensitive, <b>false</b> 
            otherwise. The default is true.</value>
            <remarks>
            A case-insensitive language formatter must override this 
            property to return false.
            </remarks>
        </member>
        <member name="F:FSharp.Formatting.CSharpFormat.CodeFormat.IMPOSSIBLE_MATCH_REGEX">
            <summary>
            A regular expression that should never match anything.
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.CodeFormat.#ctor">
            <summary/>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.CodeFormat.ConcatenateRegex(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.CodeFormat.BuildRegex(System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.CodeFormat.Sanitize(System.Text.StringBuilder)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.CodeFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.CPlusPlusFormat">
            <summary>
            Generates color-coded HTML 4.01 from C++ source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CPlusPlusFormat.Keywords">
            <summary>
            The list of C++ keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CPlusPlusFormat.Preprocessors">
            <summary>
            The list of C++ preprocessors.
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.CSharpFormat">
            <summary>
            Generates color-coded HTML 4.01 from C# source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CSharpFormat.Keywords">
            <summary>
            The list of C# keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CSharpFormat.Preprocessors">
            <summary>
            The list of C# preprocessors.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.CSharpFormat.Operators">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.FSharpFormat">
            <summary>
            Generates color-coded HTML 4.01 from F# source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.FSharpFormat.Operators">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.FSharpFormat.CommentRegEx">
            <summary>
            Regular expression string to match single line and multi-line 
            comments (// and (* *)). 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.FSharpFormat.Keywords">
            <summary>
            The list of F# keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.FSharpFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.FSharpFormat.Preprocessors">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.HaskellFormat">
            <summary>
            Generates color-coded HTML 4.01 from MSH (code name Monad) source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.HaskellFormat.CommentRegEx">
            <summary>
            Regular expression string to match single line comments (#).
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.HaskellFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.HaskellFormat.Keywords">
            <summary>
            The list of MSH keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.HaskellFormat.Preprocessors">
            <summary>
            Use preprocessors property to hilight operators.
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.HtmlFormat">
            <summary>
            Generates color-coded HTML 4.01 from HTML/XML/ASPX source code.
            </summary>
            <remarks>
            <para>
            This implementation assumes that code inside &lt;script&gt; blocks 
            is JavaScript, and code inside &lt;% %&gt; blocks is C#.</para>
            <para>
            The default tab width is set to 2 characters in this class.</para>
            </remarks>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.HtmlFormat.#ctor">
            <summary/>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.HtmlFormat.AttributeMatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            attribute's name/value in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.HtmlFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.JavaScriptFormat">
            <summary>
            Generates color-coded HTML 4.01 from JavaSctript source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.JavaScriptFormat.Keywords">
            <summary>
            The list of JavaScript keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.JavaScriptFormat.Preprocessors">
            <summary>
            Use the pre-processor color to mark directives that start with @.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.JavaScriptFormat.Operators">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.MshFormat">
            <summary>
            Generates color-coded HTML 4.01 from MSH (code name Monad) source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.MshFormat.CommentRegEx">
            <summary>
            Regular expression string to match single line comments (#).
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.MshFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.MshFormat.Keywords">
            <summary>
            The list of MSH keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.MshFormat.Preprocessors">
            <summary>
            Use preprocessors property to hilight operators.
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.PaketFormat">
            <summary>
            Generates color-coded Paket source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PaketFormat.CommentRegEx">
            <summary>
             Regular expression string to match single line and multi-line 
             comments (// and (* *)). Single line comments should have to have 
             a space after them to avoid color as comments URLs and paths. For example
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PaketFormat.Operators">
            <summary>
            Paket operators
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PaketFormat.Keywords">
            <summary>
            Paket Keywords
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PaketFormat.NumberRegEx">
            <summary>
            Matches version numbers
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.PaketFormat.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.PaketFormat.BuildKeywordsRegex(System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.PhpFormat">
            <summary>
            Generates color-coded HTML 4.01 from PHP source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PhpFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PhpFormat.Keywords">
            <summary>
            The list of PHP keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.PhpFormat.Preprocessors">
            <summary>
            The list of PHP preprocessors.
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.SourceFormat">
            <summary>
            Provides a base implementation for all code formatters.
            </summary>
            <remarks>
            <para>
            To display the formatted code on your web site, the web page must 
            refer to a stylesheet that defines the formatting for the different 
            CSS classes generated by CSharpFormat:
            .csharpcode, pre, .rem, .kwrd, .str, .op, .preproc, .alt, .lnum.
            </para>
            <para>
            Note that if you have multi-line comments in your source code
            (like /* ... */), the "line numbers" or "alternate line background" 
            options will generate code that is not strictly HTML 4.01 compliant. 
            The code will still look good with IE5+ or Mozilla 0.8+. 
            </para>
            </remarks>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.#ctor">
            <summary/>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.SourceFormat.TabSpaces">
            <summary>
            Gets or sets the tabs width.
            </summary>
            <value>The number of space characters to substitute for tab 
            characters. The default is <b>4</b>, unless overridden is a 
            derived class.</value>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.SourceFormat.LineNumbers">
            <summary>
            Enables or disables line numbers in output.
            </summary>
            <value>When <b>true</b>, line numbers are generated. 
            The default is <b>false</b>.</value>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.SourceFormat.Alternate">
            <summary>
            Enables or disables alternating line background.
            </summary>
            <value>When <b>true</b>, lines background is alternated. 
            The default is <b>false</b>.</value>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.SourceFormat.EmbedStyleSheet">
            <summary>
            Enables or disables the embedded CSS style sheet.
            </summary>
            <value>When <b>true</b>, the CSS &lt;style&gt; element is included 
            in the HTML output. The default is <b>false</b>.</value>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.FormatCode(System.IO.Stream)">
            <overloads>Transform source code to HTML 4.01.</overloads>
            
            <summary>
            Transforms a source code stream to HTML 4.01.
            </summary>
            <param name="source">Source code stream.</param>
            <returns>A string containing the HTML formatted code.</returns>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.FormatCode(System.String)">
            <summary>
            Transforms a source code string to HTML 4.01.
            </summary>
            <returns>A string containing the HTML formatted code.</returns>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.FormatSubCode(System.String)">
            <summary>
            Allows formatting a part of the code in a different language,
            for example a JavaScript block inside an HTML file.
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.GetCssStream">
            <summary>
            Gets the CSS stylesheet as a stream.
            </summary>
            <returns>A text <see cref="T:System.IO.Stream"/> of the CSS definitions.</returns>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.GetCssString">
            <summary>
            Gets the CSS stylesheet as a string.
            </summary>
            <returns>A string containing the CSS definitions.</returns>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.EscapeHtml(System.String,System.Int32)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.SourceFormat.CodeRegex">
            <summary>
            The regular expression used to capture language tokens.
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SourceFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.SyntaxHighlighter">
            <summary>
            Summary description for SyntaxHighlighter
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SyntaxHighlighter.FormatHtml(System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="M:FSharp.Formatting.CSharpFormat.SyntaxHighlighter.FormatCode(System.String,System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.TsqlFormat">
            <summary>
            Generates color-coded T-SQL source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.TsqlFormat.CommentRegEx">
            <summary>
            Regular expression string to match single line 
            comments (--). 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.TsqlFormat.StringRegEx">
            <summary>
            Regular expression string to match string literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.TsqlFormat.CaseSensitive">
            <summary>
            Returns <b>false</b>, since T-SQL is not case sensitive.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.TsqlFormat.Keywords">
            <summary>
            The list of T-SQL keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.TsqlFormat.Preprocessors">
            <summary>
            Use the pre-processor color to mark keywords that start with @@.
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.TypeScriptFormat">
            <summary>
            Generates color-coded HTML 4.01 from TypeScript source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.TypeScriptFormat.Keywords">
            <summary>
            The list of TypeScript keywords extends the ones from JavaScript.
            </summary>
        </member>
        <member name="T:FSharp.Formatting.CSharpFormat.VisualBasicFormat">
            <summary>
            Generates color-coded HTML 4.01 from Visual Basic source code.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.VisualBasicFormat.CaseSensitive">
            <summary>
            Determines if the language is case sensitive.
            </summary>
            <value>Always <b>true</b>, since VB is not case sensitive.</value>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.VisualBasicFormat.CommentRegEx">
            <summary>
            Regular expression string to match comments (' and REM). 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.VisualBasicFormat.StringRegEx">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.VisualBasicFormat.Keywords">
            <summary>
            The list of VB keywords.
            </summary>
        </member>
        <member name="P:FSharp.Formatting.CSharpFormat.VisualBasicFormat.Preprocessors">
            <summary>
            The list of VB preprocessors.
            </summary>
        </member>
    </members>
</doc>
