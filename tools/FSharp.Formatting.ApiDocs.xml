<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Formatting.ApiDocs</name></assembly>
<members>
<member name="T:FSharp.Collections.Tree`1">
<summary>
 Represents a tree with nodes containing values an a list of children

</summary>
</member>
<member name="M:FSharp.Collections.Tree.ofIndentedList``1(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Int32,``0}})">
<summary>
 Turns a list of items with an indentation specified by an integer
 into a tree where indented items are children.
</summary>
</member>
<member name="M:FSharp.Collections.Tree.takeDeeperThan``2(``0,Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Takes elements that are deeper (children) and turns them into nodes
</summary>
</member>
<member name="M:FSharp.Collections.Tree.takeAtLevel``2(``0,Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Takes all elements at the specified level and turns them into nodes
</summary>
</member>
<member name="M:FSharp.Collections.List.nestUnderLastMatching``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 A function that nests items of the input sequence
 that do not match a specified predicate under the
 last item that matches the predicate.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionUntilEquals``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions the input list into two parts - the break is added
 at a point where the list starts with the specified sub-list.
</summary>
</member>
<member name="M:FSharp.Collections.List.startsWith``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Tests whether a list starts with the elements of another
 list (specified as the first parameter)
</summary>
</member>
<member name="M:FSharp.Collections.List.iterInterleaved``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Iterates over the elements of the list and calls the first function for
 every element. Between each two elements, the second function is called.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionUntilLookahead``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the
 specified predicate returns &apos;false&apos;) and a rest of the list.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionUntil``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the
 specified predicate returns &apos;false&apos;) and a rest of the list.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionWhileLookahead``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the specified predicate
 returns true) and a rest of the list. The predicate gets the entire
 tail of the list and can perform lookahead.
</summary>
</member>
<member name="M:FSharp.Collections.List.partitionWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Partitions list into an initial sequence (while the
 specified predicate returns true) and a rest of the list.
</summary>
</member>
<member name="M:FSharp.Patterns.|Command|_|``2(``0,System.Collections.Generic.IDictionary{``0,``1})">
<summary>
 Lookup in a dictionary
</summary>
</member>
<member name="M:FSharp.Patterns.|ParseCommand|_|(System.String)">
<summary>
 Utility for parsing commands - this deals with a single command.
 The key of the command should be identifier with just
 characters in it - otherwise, the parsing fails.
</summary>
</member>
<member name="M:FSharp.Patterns.|ParseCommands|_|(System.String)">
<summary>
 Utility for parsing commands. Commands can be used in different places. We
 recognize `key1=value, key2=value` and also `key1:value, key2:value`
 The key of the command should be identifier with just
 characters in it - otherwise, the parsing fails.
</summary>
</member>
<member name="M:FSharp.Patterns.|Let|``2(``0,``1)">
<summary>
 Parameterized pattern that assigns the specified value to the
 first component of a tuple. Usage:

    match str with
    | Let 1 (n, &quot;one&quot;) | Let 2 (n, &quot;two&quot;) -&gt; n

</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TrimParagraphLines|(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,FSharp.Formatting.Markdown.MarkdownRange}})">
<summary>
 Trims all lines of the current paragraph
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TrimBlankStart|(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,FSharp.Formatting.Markdown.MarkdownRange}})">
<summary>
 Removes whitespace lines from the beginning of the list
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TakeCodeBlock|_|(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,FSharp.Formatting.Markdown.MarkdownRange}})">
<summary>
 Matches when there are some lines at the beginning that are
 either empty (or whitespace) or start with at least 4 spaces (a tab counts as 4 spaces here).
 Returns all such lines from the beginning until a different line and
 the number of spaces the first line started with.
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TakeStartingWithOrBlank|_|(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Matches when there are some lines at the beginning that are
 either empty (or whitespace) or start with the specified string.
 Returns all such lines from the beginning until a different line.
</summary>
</member>
<member name="M:FSharp.Patterns.Lines.|TrimBlank|``1(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,``0}})">
<summary>
 Removes blank lines from the start and the end of a list
</summary>
</member>
<member name="M:FSharp.Patterns.List.|AsString|(Microsoft.FSharp.Collections.FSharpList{System.Char})">
<summary>
 Returns a list of characters as a string.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|BracketDelimited|_|(System.Char,System.Char,Microsoft.FSharp.Collections.FSharpList{System.Char})">
<summary>
 Matches a list if it starts with a bracketed list. Nested brackets
 are skipped (by counting opening and closing brackets) and can be
 escaped using the &apos;\&apos; symbol.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|Delimited|_|``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Matches a list if it starts with a sub-list that is delimited
 using the specified delimiter. Returns a wrapped list and the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|StartsWith|_|``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Matches a list if it starts with a sub-list. Returns the list.
</summary>
</member>
<member name="M:FSharp.Patterns.List.|DelimitedWith|_|``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Matches a list if it starts with a sub-list that is delimited
 using the specified delimiters. Returns a wrapped list and the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|EqualsRepeated|_|(System.String,FSharp.Formatting.Markdown.MarkdownRange,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string consists of some number of
 complete repetitions of a specified sub-string.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithWrapped|_|(System.String,System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with a sub-string wrapped using the
 opening and closing sub-string specified in the parameter.
 For example &quot;[aa]bc&quot; is wrapped in [ and ] pair. Returns the wrapped
 text together with the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithRepeated|_|(System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with a non-zero number of complete
 repetitions of the specified parameter (and returns the number
 of repetitions, together with the rest of the string)

    let (StartsWithRepeated &quot;/\&quot; (2, &quot; abc&quot;)) = &quot;/\/\ abc&quot;

</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsAndEndsWithTrim|_|(System.String,System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with the given value and ends
 with a given value (and returns trimmed body)
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsAndEndsWith|_|(System.String,System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with the given value and ends
 with a given value (and returns the rest of it)
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithNTimesTrimIgnoreStartWhitespace|_|(System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with the specified sub-string (ignoring whitespace at the start)
 The matched string is trimmed from all whitespace.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithTrim|_|(System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with the specified sub-string
 The matched string is trimmed from all whitespace.
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWith|_|(System.String,System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with the specified sub-string
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|StartsWithAny|_|(System.Collections.Generic.IEnumerable{System.String},System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string starts with any of the specified sub-strings
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimStartAndCount|(System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Returns a string trimmed from the start together with
 the number of skipped whitespace characters
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimEndUsing|(System.Collections.Generic.IEnumerable{System.Char},System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Returns a string trimmed from the end using characters given as a parameter
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimStart|(System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Returns a string trimmed from the start
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimEnd|(System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Returns a string trimmed from the end
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|TrimBoth|(System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Returns a string trimmed from both start and end
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|Unindented|_|(System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string does starts with non-whitespace
</summary>
</member>
<member name="M:FSharp.Patterns.StringPosition.|WhiteSpace|_|(System.String,FSharp.Formatting.Markdown.MarkdownRange)">
<summary>
 Matches when a string is a whitespace or null
</summary>
</member>
<member name="M:FSharp.Patterns.String.removeSpaces(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Given a list of lines indented with certan number of whitespace
 characters (spaces), remove the spaces from the beginning of each line
 and return the string as a list of lines
</summary>
</member>
<member name="M:FSharp.Patterns.String.|SkipSingleLine|(System.String)">
<summary>
 Ignores everything until a end-line character is detected, returns the remaining string.
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsWithWrapped|_|(System.String,System.String,System.String)">
<summary>
 Matches when a string starts with a sub-string wrapped using the
 opening and closing sub-string specified in the parameter.
 For example &quot;[aa]bc&quot; is wrapped in [ and ] pair. Returns the wrapped
 text together with the rest.
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsAndEndsWithTrim|_|(System.String,System.String,System.String)">
<summary>
 Matches when a string starts with the given value and ends
 with a given value (and returns trimmed body)
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsAndEndsWith|_|(System.String,System.String,System.String)">
<summary>
 Matches when a string starts with the given value and ends
 with a given value (and returns the rest of it)
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsWithTrim|_|(System.String,System.String)">
<summary>
 Matches when a string starts with the specified sub-string
 The matched string is trimmed from all whitespace.
</summary>
</member>
<member name="M:FSharp.Patterns.String.|StartsWith|_|(System.String,System.String)">
<summary>
 Matches when a string starts with the specified sub-string
</summary>
</member>
<member name="M:FSharp.Patterns.String.|TrimBoth|(System.String)">
<summary>
 Returns a string trimmed from both start and end
</summary>
</member>
<member name="M:FSharp.Patterns.String.|WhiteSpace|_|(System.String)">
<summary>
 Matches when a string is a whitespace or null
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocsSearchIndexEntry">
<summary>
 Represents an entry suitable for constructing a Lunr index
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.Substitutions">
<summary>
 The substitutions.  Different substitutions can also be used for each specific input
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.Root">
<summary>
 The root URL for the entire generation, normally &apos;/&apos;
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.Resolver">
<summary>
 Specifies file extensions to use in files and URLs
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.Qualify">
<summary>
 Indicates if each collection is being qualified by its collection name, e.g. &apos;reference/FSharp.Core&apos;
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.FileExtensions">
<summary>
 Specifies file extensions to use in files and URLs
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.EntityInfos">
<summary>
 The full list of all entities
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocModel.Collection">
<summary>
 The full list of all entities
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocModel.IndexOutputFile(System.String,System.Boolean,System.String)">
<summary>
 URL of the &apos;index.html&apos; for the reference documentation for the model
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocModel.IndexFileUrl(System.String,System.String,System.Boolean,System.String)">
<summary>
 URL of the &apos;index.html&apos; for the reference documentation for the model
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocModel">
<summary>
 Represents a set of assemblies integrated with their associated documentation
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.PublicOnly">
<summary>
 Whether to generate only public things
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.Warn">
<summary>
 Whether doc processing should warn on missing comments
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.MarkdownComments">
<summary>
 Whether the input uses markdown comments
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.Substitutions">
<summary>
 The substitutionss active for this input. If specified these
 are used instead of the overall substitutions.  This allows different parameters (e.g.
 different authors) for each assembly in a collection.
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.SourceRepo">
<summary>
 The URL the the source repo where the source code lives
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.SourceFolder">
<summary>
 The compile-time source folder
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.XmlFile">
<summary>
 Override the default XML file (normally assumed to live alongside)
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocInput.Path">
<summary>
 The path to the assembly
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocInput">
<summary>
 Represents an input assembly for API doc generation
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntityInfo.ParentModule">
<summary>
 The parent module, if any.
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntityInfo.Namespace">
<summary>
 The namespace the entity belongs to
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntityInfo.Entity">
<summary>
 The actual entity
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntityInfo.Collection">
<summary>
 The collection of assemblies the entity belongs to
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocEntityInfo">
<summary>
 High-level information about a module definition
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocCollection.Namespaces">
<summary>
 All namespaces in the collection
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocCollection.CollectionName">
<summary>
 Name of the collection
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocCollection.Assemblies">
<summary>
 All assemblies in the collection
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocCollection">
<summary>
 Represents a group of assemblies integrated with its associated documentation
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocNamespace.UrlHash">
<summary>
 The hash label for the URL with the overall namespaces file
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocNamespace.UrlBaseName">
<summary>
 The base name for the generated file
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocNamespace.Substitutions">
<summary>
 The substitution substitutions active for generating thist content
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocNamespace.NamespaceDocs">
<summary>
 The summary text for the namespace
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocNamespace.Name">
<summary>
 The name of the namespace
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocNamespace.Entities">
<summary>
 All modules in the namespace
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocNamespace.Url(System.String,System.String,System.Boolean,System.String)">
<summary>
 The URL of the best link documentation for the item (without the http://site.io/reference)
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocNamespace.OutputFile(System.String,System.Boolean,System.String)">
<summary>
 The name of the file generated for this entity
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocNamespace">
<summary>
 Represents a namespace integrated with its associated documentation
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.ValuesAndFuncs">
<summary>
 Values and functions of the module
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.UrlBaseName">
<summary>
 The URL base name of the primary documentation for the entity  (without the http://site.io/reference)
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.UnionCases">
<summary>
 The cases of a union type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.TypeExtensions">
<summary>
 Type extensions of the module
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Symbol">
<summary>
 The F# compiler symbol for the type definition
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Substitutions">
<summary>
 The substitution parameters active for generating thist content
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.StaticParameters">
<summary>
 Static parameters
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.StaticMembers">
<summary>
 The static members of the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.SourceLocation">
<summary>
 The URL of the member&apos;s source location, if any
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.RequiresQualifiedAccess">
<summary>
 Does the module have the RequiresQualifiedAccess attribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.RecordFields">
<summary>
 The fields of a record type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.NestedEntities">
<summary>
 All nested modules and types
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Name">
<summary>
 The name of the entity
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.IsTypeDefinition">
<summary>
 Indicates if the entity is a type definition
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.IsObsolete">
<summary>
 Gets a value indicating whether this member is obsolete
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.InstanceMembers">
<summary>
 The instance members of the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Exclude">
<summary>
 The exclude flag
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.DelegateSignature">
<summary>
 If this is a delegate, then e formatted signature
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Constructors">
<summary>
 The constuctorsof the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Comment">
<summary>
 The attached comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.CategoryIndex">
<summary>
 The category index of the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Category">
<summary>
 The category of the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.BaseType">
<summary>
 The base type of the type, formatted
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Attributes">
<summary>
 The declared attributes of the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.Assembly">
<summary>
 The name of the type&apos;s assembly
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.AllMembers">
<summary>
 All members of the type
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.AllInterfaces">
<summary>
 All interfaces of the type, formatted
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.ActivePatterns">
<summary>
 Active patterns of the module
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocEntity.AbbreviatedType">
<summary>
 If this is a type abbreviation, then the abbreviated type
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocEntity.Url(System.String,System.String,System.Boolean,System.String)">
<summary>
 The URL of the best link for the entity relative to &quot;reference&quot; directory (without the http://site.io/reference)
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocEntity.OutputFile(System.String,System.Boolean,System.String)">
<summary>
 The name of the file generated for this entity
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocEntity.GetUrl(System.String,System.String,System.String,System.Boolean,System.String)">
<summary>
 Compute the URL of the best link for the entity relative to &quot;reference&quot; directory (without the http://site.io/reference)
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocEntity">
<summary>
 Represents a type definition integrated with its associated documentation
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.UsageHtml">
<summary>
 The usage section in a typical tooltip
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.UrlBaseName">
<summary>
 The URL base name of the best link documentation for the item (without the http://site.io/reference)
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.TypeArguments">
<summary>
 The member&apos;s type arguments
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Symbol">
<summary>
 The symbol this member is related to
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.SourceLocation">
<summary>
 The URL of the member&apos;s source location, if any
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.ReturnInfo">
<summary>
 The return section in a typical tooltip
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Parameters">
<summary>
 The member&apos;s parameters and associated documentation
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Name">
<summary>
 Name of the member
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Modifiers">
<summary>
 The member&apos;s modifiers
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Kind">
<summary>
 The kind of the member
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.IsObsolete">
<summary>
 Gets a value indicating whether this member is obsolete
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.FormatTypeArguments">
<summary>
 Formats type arguments
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.FormatModifiers">
<summary>
 Formats modifiers
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.FormatCompiledName">
<summary>
 Formats the compiled name
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.ExtendedType">
<summary>
 The type extended by an extension member, if any
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Exclude">
<summary>
 The exclude flag
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Details">
<summary>
 The members details
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.CustomOperationName">
<summary>
 Returns the custom operation name, when this attribute is the CustomOperationAttribute.
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.CompiledName">
<summary>
 The member&apos;s compiled name, if any
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Comment">
<summary>
 The attached comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.CategoryIndex">
<summary>
 The category index
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Category">
<summary>
 The category
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocMember.Attributes">
<summary>
 The declared attributes of the member
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocMember.Url(System.String,System.String,System.Boolean,System.String)">
<summary>
 The URL of the best link documentation for the item relative to &quot;reference&quot; directory (without the http://site.io/reference)
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocMember.GetUrl(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
<summary>
 The URL of the best link documentation for the item relative to &quot;reference&quot; directory (without the http://site.io/reference)
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocMember">
<summary>
 Represents an method, property, constructor, function or value, record field, union case or static parameter
 integrated with its associated documentation. Includes extension members.
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocMemberKind">
<summary>
 Represents the kind of member
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.ObsoleteMessage">
<summary>
 Returns the obsolete message, when this attribute is the System.ObsoleteAttribute. When its not or no message was specified, an empty string is returned
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.NamedConstructorArguments">
<summary>
 The named arguments for the attribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.Name">
<summary>
 The name of the attribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.IsRequireQualifiedAccessAttribute">
<summary>
 Gets a value indicating whether this attribute is RequireQualifiedAccessAttribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.IsObsoleteAttribute">
<summary>
 Gets a value indicating whether this attribute is System.ObsoleteAttribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.IsCustomOperationAttribute">
<summary>
 Gets a value indicating whether this attribute the CustomOperationAttribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.FullName">
<summary>
 The qualified name of the attribute
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.CustomOperationName">
<summary>
 Returns the custom operation name, when this attribute is the CustomOperationAttribute. When its not an empty string is returned
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocAttribute.ConstructorArguments">
<summary>
 The arguments to the constructor for the attribute
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.TryGetObsoleteMessage(System.Collections.Generic.IEnumerable{FSharp.Formatting.ApiDocs.ApiDocAttribute})">
<summary>
 Tries to find the System.ObsoleteAttribute and return its obsolete message
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.TryGetCustomOperationName(System.Collections.Generic.IEnumerable{FSharp.Formatting.ApiDocs.ApiDocAttribute})">
<summary>
 Tries to find the CustomOperationAttribute and return its obsolete message
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.FormatLongForm">
<summary>
 Formats the attribute using the Name. Keeps the &quot;Attribute&quot;-suffix. E.g ObsoleteAttribute
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.FormatFullNameLongForm">
<summary>
 Formats the attribute using the FullName. Keeps the &quot;Attribute&quot;-suffix. E.g System.ObsoleteAttribute
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.FormatFullName">
<summary>
 Formats the attribute using the FullName. Removes the &quot;Attribute&quot;-suffix. E.g System.Obsolete
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.Format">
<summary>
 Formats the attribute using the Name. Removes the &quot;Attribute&quot;-suffix. E.g Obsolete
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocAttribute.Format(System.String,System.Boolean)">
<summary>
 Formats the attribute with the given name
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocAttribute">
<summary>
 Represents a custom attribute attached to source code
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Xml">
<summary>
 The XElement for the XML doc if available
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Summary">
<summary>
 The summary for the comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Returns">
<summary>
 The return sections of the comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Remarks">
<summary>
 The remarks html for comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.RawData">
<summary>
 The raw data of the comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Parameters">
<summary>
 The param sections of the comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Notes">
<summary>
 The notes sections of the comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Exceptions">
<summary>
 The notes sections of the comment
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocComment.Examples">
<summary>
 The examples sections of the comment
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocComment">
<summary>
 Represents a documentation comment attached to source code
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocHtml.Id">
<summary>
 Get the Id of the element when rendered to html, if any
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.ApiDocHtml.HtmlText">
<summary>
 Get the HTML text of the HTML section
</summary>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocHtml">
<summary>
 Represents some HTML formatted by model generation
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocs.SearchIndexEntriesForModel(FSharp.Formatting.ApiDocs.ApiDocModel)">
 <summary>
 Generates the search index from the given documentation model
 </summary>

 <param name="model">the model for documentation</param>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocs.GenerateModel(Microsoft.FSharp.Collections.FSharpList{FSharp.Formatting.ApiDocs.ApiDocInput},System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{FSharp.Formatting.Templating.ParamKey,System.String}},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{FSharp.Formatting.ApiDocs.ApiDocFileExtensions})">
 <summary>
 Generates a documentation model for the assemblies specified by the `inputs` parameter
 </summary>

 <param name="inputs">the components to generate documentation for</param>
 <param name="collectionName">the overall collection name</param>
 <param name="substitutions">the substitutions to use in content and templates</param>
 <param name="qualify">qualify the output set by collection name, e.g. <c>reference/FSharp.Core/...</c></param>
 <param name="libDirs">Use this to specify additional paths where referenced DLL files can be found when formatting code snippets inside Markdown comments</param>
 <param name="otherFlags">Additional flags that are passed to the F# compiler (you can use this if you want to
    specify references explicitly etc.)</param>
 <param name="root">The root url of the generated documentation within the website</param>
 <param name="urlRangeHighlight">A function that can be used to override the default way of generating GitHub links</param>
 <param name="strict">Fail if any assembly is missing XML docs or can't be resolved</param>
 <param name="extension">The extensions used for files and URLs</param>
 <param name="onError"></param>

</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocs.GenerateMarkdownPhased``1(Microsoft.FSharp.Collections.FSharpList{FSharp.Formatting.ApiDocs.ApiDocInput},System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{FSharp.Formatting.Templating.ParamKey,System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Like GenerateMarkdown but allows for intermediate phase to insert other global substitutions
 and combine search index
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocs.GenerateMarkdown(Microsoft.FSharp.Collections.FSharpList{FSharp.Formatting.ApiDocs.ApiDocInput},System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{FSharp.Formatting.Templating.ParamKey,System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
 <summary>
 Generates default Markdown pages for the assemblies specified by the `inputs` parameter
 </summary>

 <param name="inputs">the components to generate documentation for</param>
 <param name="output">the output directory</param>
 <param name="collectionName">the overall collection name</param>
 <param name="substitutions">the substitutions to use in content and templates</param>
 <param name="template">the template to use for each documentation page</param>
 <param name="root">The root url of the generated documentation within the website</param>
 <param name="qualify">qualify the output set by collection name, e.g. `reference/FSharp.Core/...`</param>
 <param name="libDirs">Use this to specify additional paths where referenced DLL files can be found when formatting code snippets inside Markdown comments</param>
 <param name="otherFlags">Additional flags that are passed to the F# compiler to specify references explicitly etc.</param>
 <param name="urlRangeHighlight">A function that can be used to override the default way of generating GitHub links</param>
 <param name="strict">Fail if any assembly is missing XML docs or can't be resolved</param>

</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocs.GenerateHtmlPhased``1(Microsoft.FSharp.Collections.FSharpList{FSharp.Formatting.ApiDocs.ApiDocInput},System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{FSharp.Formatting.Templating.ParamKey,System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Like GenerateHtml but allows for intermediate phase to insert other global substitutions
 and combine search index
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.ApiDocs.GenerateHtml(Microsoft.FSharp.Collections.FSharpList{FSharp.Formatting.ApiDocs.ApiDocInput},System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{FSharp.Formatting.Templating.ParamKey,System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Uri,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String}}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}})">
 <summary>
 Generates default HTML pages for the assemblies specified by the `inputs` parameter
 </summary>

 <param name="inputs">the components to generate documentation for</param>
 <param name="output">the output directory</param>
 <param name="collectionName">the overall collection name</param>
 <param name="substitutions">the substitutions to use in content and templates</param>
 <param name="template">the template to use for each documentation page</param>
 <param name="root">The root url of the generated documentation within the website</param>
 <param name="qualify">qualify the output set by collection name, e.g. `reference/FSharp.Core/...`</param>
 <param name="libDirs">Use this to specify additional paths where referenced DLL files can be found when formatting code snippets inside Markdown comments</param>
 <param name="otherFlags">Additional flags that are passed to the F# compiler to specify references explicitly etc.</param>
 <param name="urlRangeHighlight">A function that can be used to override the default way of generating GitHub links</param>
 <param name="strict">Fail if any assembly is missing XML docs or can't be resolved</param>
</member>
<member name="T:FSharp.Formatting.ApiDocs.ApiDocs">
 <summary>
  This type exposes the functionality for producing documentation model from `dll` files with associated `xml` files
  generated by the F# or C# compiler. To generate documentation model, use one of the overloades of the `Generate` method.
 </summary>

 <namespacedoc>
   <summary>Functionality relating to generating API documentation</summary>
 </namespacedoc>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.readCommentsInto``1(FSharp.Compiler.Symbols.FSharpSymbol,FSharp.Formatting.ApiDocs.SymbolReader.ReadingContext,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.FSharp.Core.FSharpFunc{FSharp.Formatting.ApiDocs.ApiDocComment,``0}}}}})">
<summary>
 Reads XML documentation comments and calls the specified function
 to parse the rest of the entity, unless [omit] command is set.
 The function is called with category name, commands &amp; comment.
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.addMissingLinkToTypes(FSharp.Formatting.ApiDocs.SymbolReader.ReadingContext,FSharp.Formatting.Literate.LiterateDocument)">
<summary>
 Adds the missing links to types to the document defined links
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.wrapInlineCodeLinksInParagraphs(FSharp.Formatting.ApiDocs.SymbolReader.ReadingContext,FSharp.Formatting.Markdown.MarkdownParagraph)">
<summary>
 Wraps inside an IndirectLink all inline code spans in the paragraph that can be converted to a link
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.wrapInlineCodeLinksInSpans(FSharp.Formatting.ApiDocs.SymbolReader.ReadingContext,FSharp.Formatting.Markdown.MarkdownSpan)">
<summary>
 Wraps the span inside an IndirectLink if it is an inline code that can be converted to a link
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.addLinkToType(FSharp.Formatting.Literate.LiterateDocument,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.String,FSharp.Formatting.ApiDocs.CrefReference}})">
<summary>
 Adds a cross-type link to the document defined links
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.getTypeLink(FSharp.Formatting.ApiDocs.SymbolReader.ReadingContext,System.String)">
<summary>
 Returns a tuple of the undefined link and its Cref if it exists
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.linkNotDefined(FSharp.Formatting.Literate.LiterateDocument,System.String)">
<summary>
 Returns whether the link is not included in the document defined links
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.collectParagraphIndirectLinks(FSharp.Formatting.Markdown.MarkdownParagraph)">
<summary>
 Returns all indirect links in the specified paragraph node
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.SymbolReader.collectSpanIndirectLinks(FSharp.Formatting.Markdown.MarkdownSpan)">
<summary>
 Returns all indirect links in a specified span node
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.TypeFormatter.codeHtml(FSharp.Formatting.HtmlModel.HtmlElement)">
<summary>
 We squeeze the spaces out of anything where whitespace layout must be exact - any deliberate
 whitespace must use &amp;#32;

 This kind of sucks but stems from the fact the formatting for the internal HTML DSL is freely
 adding spaces which are actually significant when formatting F# type information.
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.GenerateHtml.HtmlRender.GlobalSubstitutions">
<summary>
 Get the substitutions relevant to all
</summary>
</member>
<member name="M:FSharp.Formatting.ApiDocs.GenerateHtml.embed(FSharp.Formatting.ApiDocs.ApiDocHtml)">
<summary>
 Embed some HTML generateed in GenerateModel
</summary>
</member>
<member name="P:FSharp.Formatting.ApiDocs.GenerateMarkdown.MarkdownRender.GlobalSubstitutions">
<summary>
 Get the substitutions relevant to all
</summary>
</member>
</members>
</doc>
